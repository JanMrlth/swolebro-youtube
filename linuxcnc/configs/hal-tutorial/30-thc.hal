# HAL configurations for torch height control and ohmic probing.

# Note that this is still a work in progress, and my setup is missing a few
# things, like a floating mount switch, magnetic breakaway (as a backup for
# fuckups), or an arc-OK signal. Caveat emptor, and all the usual caveats.

# For a now-half-broken simulation using an older thcud, see:
# https://forum.linuxcnc.org/49-basic-configuration/26552-thc-up-down-simulator

# For an alternate, pure-HAL solution that's kiiinda complex, see:
# https://forum.linuxcnc.org/plasma-laser/34978-thc-plasma-configs-with-how-to

# For the new plasmac component, that reimplements the above one in a single
# black box, but still, is kinda complex, and not yet available for a stable
# LinuxCNC release, see this 178 page forum thread:
# https://forum.linuxcnc.org/plasma-laser/35449-another-plasma-component

# Personally, I'm a fan of KISS. Also Kernighan's Law.
# I need things to be at least as dumb as I am - preferably even more dumber.
loadrt or2 count=3
loadrt and2 count=3
loadrt not
loadrt conv_u32_bit
loadrt conv_s32_u32
loadrt bitwise
loadrt thcud

addf or2.0 servo-thread
addf or2.1 servo-thread
addf or2.2 servo-thread
addf and2.0 servo-thread
addf and2.1 servo-thread
addf and2.2 servo-thread
addf not.0 servo-thread
addf conv-u32-bit.0 servo-thread
addf conv-s32-u32.0 servo-thread
addf bitwise.0 servo-thread
addf thcud servo-thread

# ==== Probing ====

# Use M64 P1 to trigger this relay for activating the ohmic probe circuit. This
# **must** be disabled (M65 P1) before cutting, or the plasma voltage will kill
# your parport pin. (Ask me how I know.) We'll use some subroutines to handle
# that, and reduce the risk of fuckups.
net enable-probe motion.digital-out-01 => parport.0.pin-17-out
setp parport.0.pin-17-out-invert 1

# For ohmic probing, we're gonna multiplex one input pin on the parport board,
# alongside the XBox 360 Y button. That button will give us a backup we can
# activate in case we're cutting painted or rusty material with poor electrical
# contact. In those cases, a floating torch mount with a microswitch would be
# better, but I haven't added that to my machine yet, so babysitting will do.
# Besides, I mostly cut fresh sheets, where ohmic works perfectly.
net parport-ohmic parport.0.pin-11-in-not => or2.0.in0

# We'll make the button only activate during a probe move, so that we don't
# accidentally bump it during a program and raise an unexpected probe error.
# We could do this test by and2'ing with the HAL pin for our disconnect relay,
# but for demonstration purposes, I'm going to do the more "technically
# correct" method, of checking if the machine is currently doing a probe move.
# See the motion manpage for a list of motion-type values.

net xbox-y and2.0.in0

setp bitwise.0.in0 5
net motiontype motion.motion-type => conv-s32-u32.0.in
net unsigned-motiontype conv-s32-u32.0.out => bitwise.0.in1
net probetobit bitwise.0.out-xor => conv-u32-bit.0.in
net bitflip conv-u32-bit.0.out => not.0.in
net isprobing not.0.out => and2.0.in1
net backupprobe and2.0.out => or2.0.in1

net ohmic-found or2.0.out => motion.probe-input

# Also rig this probe up to something the gcode can check,
# as a safety feature.
net ohmic-found => motion.digital-in-00

# ==== THC ====

# This is the foremost check, which lets you enable/disable all of thcud's
# functionality without hacking up your HAL.
setp thcud.enable TRUE

# Bypass this thcud check, since I don't have an arc-ok signal.
setp thcud.arc-ok TRUE

# Standard hookups used for enforcing corner-locking.
net thc-current-vel motion.current-vel => thcud.current-vel
net thc-requested-vel motion.requested-vel => thcud.requested-vel

# Apart from the "enable" check, there's a secondary check
# to only compute and apply offsets while the torch is running.
net spindle-on thcud.torch-on

# This is important.
# This keeps our direct commands to stepgen from trying to go
# crazy fast. Normally it's set to 0, which appears to not limit
# it at all, and the limiting was done by passing the position
# commands to the axis. Since we subvert that standard method
# with thcud, we need to explicit set this cap.
setp stepgen.2.maxvel [AXIS_2]MAX_VELOCITY

# Rather than tying axis.2.motor-pos-cmd directly to
# stepgen.2.position-cmd, we feed that into thcud first,
# then direct the output to stepgen. Then we report back
# a false location to the axis to keep it unaware. That's
# the real magic here.
net zpos axis.2.motor-pos-cmd => thcud.z-pos-in
net thc-pos-out thcud.z-pos-out => stepgen.2.position-cmd
net thc-pos-fb thcud.z-fb-out => axis.2.motor-pos-fb

# Lastly, our signals for up and down.
# We'll listen to either the XBox controller (manual THC) or
# the parport (where I have my DIY Arduino THC). thcud is
# smart enough to ignore any inputs if the torch isn't running,
# so the fact the Arduino is continually yelling "UP!!!"
# (because torch off = 0V = too low) doesn't matter.
net xbox-x => or2.1.in0
net parport-up parport.0.pin-12-in-not => or2.1.in1
net thc-up or2.1.out => thcud.torch-up

net xbox-a => or2.2.in0
net parport-down parport.0.pin-13-in-not => or2.2.in1
net thc-down or2.2.out => thcud.torch-down
